#version 330 core

struct Material
{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct Light
{
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

};

out vec4 FragColor;
in vec3 normal;
in vec3 fragPos;
in vec2 texCoords;

uniform vec3 cubeColor;
uniform vec3 lambPos;
uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
	// ambient 
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, texCoords));

	// diffuse
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(norm, lightDir), 0.0f);
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, texCoords));

	// specular
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 refectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, refectDir), 0.0f), material.shininess);
	vec3 specular = light.specular * spec * vec3(texture(material.specular, texCoords));

	vec3 result = ambient + diffuse + specular;
	FragColor = vec4(result, 1.0f);
}